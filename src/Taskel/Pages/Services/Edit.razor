@using TaskelDB.DAO;
@using TaskelDB.Models.Service;
@using Taskel.Authentication;
@using System.Security.Claims;

@inject NavigationManager NavManager;

@page "/service/edit/{ServiceID:int}"

<div class="content-wrapper">
    <div class="center-absolute edit-popup">

        <h2 class="text-align-center">Edit Service</h2>

        <label class="field-label" for="edit-name">Name</label>
        <input class="input-field edit-field" type="text" @bind="serviceName" />

        <label class="field-label" for="edit-name">Price</label>
        <input class="input-field number-field edit-field" type="number" @bind="currentPrice" />

        <label class="field-label" for="edit-name">Description</label>
        <textarea class="input-field edit-field description-area" @bind="serviceDesc" />

        <label class="field-label" for="selectedValue">Category</label>
        <select class="category-select" id="selectedValue" value="@serviceCategory" @onchange="ChangeCategory">
            @foreach (var option in Enum.GetValues(typeof(ServiceCategory)).Cast<ServiceCategory>())
            {
                <option value="@option">@option.ToString()</option>
            }
        </select>

        <p style="color: red;">@warningText</p>
        <button class="submit-button" @onclick="SaveChanges">Save</button>
        <a class="submit-button" href="/dashboard">Cancel</a>
        <button class="submit-button" @onclick="DeleteService">Delete Service</button>

    </div>
</div>

@code {
    [Parameter] public int serviceID { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    private string serviceName = "";
    private string serviceDesc = "";
    private int currentPrice = 0;
    private ServiceCategory serviceCategory { get; set; } = ServiceCategory.Uncategorized;

    private ServiceModel serviceModel = new();
    private ServiceDAO serviceDAO = new();

    private string warningText = "";
    private int userID;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await CheckIfAuthorized())
            {
                FetchAndSetData();
            }
            else
            {
                NavManager.NavigateTo("/signup");
            }
        }
    }

    private async Task<bool> CheckIfAuthorized()
    {
        if (authenticationState != null)
        {
            var authState = await authenticationState;
            if (authState.User?.Identity?.IsAuthenticated ?? false)
            {
                var userIdClaim = authState.User?.FindFirst(ClaimTypes.NameIdentifier);
                userID = Convert.ToInt32(userIdClaim?.Value);
                return true;
            }
        }

        return false;
    }

    private void FetchAndSetData()
    {
        ServiceModel? tempModel = serviceDAO.Get(serviceID);

        if (tempModel != null)
        {
            serviceModel = tempModel;
            serviceName = serviceModel.Ser_Name;
            currentPrice = serviceModel.Current_Price;
            serviceDesc = serviceModel.Long_Description;
            serviceCategory = (ServiceCategory)serviceModel.Category;
            StateHasChanged();
        }
        else
        {
            NavManager.NavigateTo("/user");
        }
    }

    private void ChangeCategory(ChangeEventArgs e)
    {
        if (e != null && e.Value != null)
        {
            if (Enum.TryParse<ServiceCategory>(e.Value.ToString(), out ServiceCategory result))
            {
                serviceCategory = result;
                return;
            }
        }
        serviceCategory = ServiceCategory.Uncategorized;
    }


    //==== CONTROL ====
    private void DeleteService()
    {
        if (IsOwner())
        {
            serviceDAO.Delete(serviceID);
            NavManager.NavigateTo("/dashboard");
        }
    }

    private void SaveChanges()
    {
        string shortDesc = serviceDesc.Substring(0, Math.Min(serviceDesc.Length, 47));
        if (serviceDesc.Length > 47) shortDesc += "...";

        serviceModel.Ser_Name = serviceName;
        serviceModel.Short_Description = shortDesc;
        serviceModel.Long_Description = serviceDesc;
        serviceModel.Current_Price = currentPrice;
        serviceModel.Category = (int)serviceCategory;

        if (serviceModel.Ser_Name.Length < 3)
        {
            warningText = "name is too short (min 3 characters)";
            return;
        }
        if (serviceModel.Ser_Name.Length > 20)
        {
            warningText = "name is too long (max 20 characters)";
            return;
        }
        if (serviceModel.Long_Description.Length > 500)
        {
            warningText = "long descrition is too long (max 500 characters)";
            return;
        }
        if (serviceModel.Current_Price > int.MaxValue)
        {
            warningText = "Price is over the maximum";
            return;
        }
        if (serviceModel.Current_Price < 0)
        {
            warningText = "Price can't be less than zero";
            return;
        }

        if (IsOwner())
        {
            serviceModel.Update = DateTime.UtcNow;
            serviceModel.Category = (int)serviceCategory;
            serviceDAO.Update(serviceModel);
            NavManager.NavigateTo("/dashboard");
        }
        else
        {
            warningText = "You are not the owner of this service.";
        }
    }

    private bool IsOwner() => serviceModel?.User_ID == userID;
}
