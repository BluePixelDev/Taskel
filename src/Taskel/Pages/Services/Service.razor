@using TaskelDB.DAO;
@using TaskelDB.Models.Service;
@using Taskel.Authentication;
@using System.Security.Claims;
@using Taskel.Services;

@page "/service/{ServiceID:int}"

@inject NavigationManager navManager;
@inject CreditService creditService;

<div class="content-wrapper">
    <div class="service-wrapper">

        <div class="service-upper-wrapper">
            <h1 class="service-heading">@serviceModel?.Ser_Name</h1>
            <h2 class="price-tag">@serviceModel?.Current_Price K</h2>
        </div>
        <div class="service-lower-wrapper">
            <p class="label">Description</p>
            <p>@serviceModel?.Long_Description</p>

            <AuthorizeView>
                <Authorized>

                    @if (IsOwner())
                    {
                        <button class="submit-button" @onclick="EditService">Edit Service</button>
                    }
                    else
                    {
                        <button class="submit-button" @onclick="BuyService">Buy Service</button>
                    }

                </Authorized>

                <NotAuthorized>
                    <a class="submit-button" href="/signup">Buy Service</a>
                </NotAuthorized>

            </AuthorizeView>

            @if (!string.IsNullOrEmpty(WarningText))
            {
                <ErrorBox message=@WarningText />
            }

            @if (!string.IsNullOrEmpty(InfoText))
            {
                <InfoBox message=@InfoText />
            }
        </div>
    </div>
</div>

@code {

    [Parameter] public int ServiceID { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    ServiceModel? serviceModel;
    public string WarningText { get; set; } = "";
    public string InfoText { get; set; } = "";
    private int userID;


    protected override async Task OnInitializedAsync()
    {
        if (authenticationState != null)
        {
            var authState = await authenticationState;
            if (authState.User?.Identity?.IsAuthenticated ?? false)
            {
                var userIdClaim = authState.User?.FindFirst(ClaimTypes.NameIdentifier);
                userID = Convert.ToInt32(userIdClaim?.Value);
            }
        }
    }

    protected override void OnInitialized()
    {
        ServiceDAO serviceDAO = new();
        serviceModel = serviceDAO.Get(ServiceID);
    }

    private void EditService()
    {
        if (IsOwner())
        {
            navManager.NavigateTo($"/service/edit/{serviceModel?.ID}");
        }
    }

    private void BuyService()
    {
        if (serviceModel != null)
        {
            try
            {
                creditService.BuyService(userID, serviceModel.User_ID, serviceModel.ID, serviceModel.Current_Price);
                InfoText = "You bought this service! Horay!";
            }catch
            {
                WarningText = "Error occured while trying to buy a service.";
            }
        }
    }

    private bool IsOwner()
    {
        return serviceModel?.User_ID == userID;
    }
}