@page "/login"
@using Taskel.Services;
@using Taskel.Shared.Layouts;
@using Taskel.Services.Authorization;

@layout ClearLayout;
@inject AuthService authService;
@inject NavigationManager NavManager;

<div class="login-wrapper">
    <div class="login-form">
        <h1>Login</h1>
        <input type="text"
               placeholder="Username"
               class="input-field"
               @bind="@usernameInput"
               @oninput="@((e) => { usernameInput = ConvertInputToString(e.Value); })" />

        <input type="password"
               placeholder="Password"
               class="input-field"
               @bind="@passwordInput"
               @oninput="@((e) => { passwordInput = ConvertInputToString(e.Value); })" />

        @if (!string.IsNullOrEmpty(warningText))
        {
            <ErrorBox message=@warningText />
        }

        <button class="submit-button" @onclick="LoginUser">Log in</button>
        <p class="text-align-center">Don't have an account yet? <a onClick="window.location.replace('/signup')" href="/signup">Sign up!</a>	</p>
    </div>
</div>

@code {
    private string usernameInput = "";
    private string passwordInput = "";
    private string warningText = "";

    public void LoginUser()
    {
        try
        {
            if (authService.Login(usernameInput, passwordInput))
            {
                NavManager.NavigateTo("/");
            }
        }
        catch (AuthLoginException e)
        {
            switch (e.ExceptionType)
            {
                case AuthLoginExceptionType.NotFound:
                    warningText = "Could not found an account with matching credentials.";
                    break;
                case AuthLoginExceptionType.CredentialsMismatch:
                    warningText = "Wrong credentials, invalid username or password";
                    break;
            }
        }
    }


    private string ConvertInputToString(object? input)
    {
        return input != null ? (string)input : "";
    }
}
