@page "/user/create"
@using DataAccessLibrary
@using DataTemplateLibrary
@using DataTemplateLibrary.Models;
@using CookieService;
@using SessionService;
@using ServerManagement;
@inject ServerManagement.ServerManager serverManager;
@inject LoginService.LoginManager LoginManager;
@inject NavigationManager NavManager;

<h2>Create</h2>

<h3>name:</h3>
<input class="input-field" type="text" @bind="@Name" @oninput="@((e) => { Name=(string)e.Value;})" />
<h3>price:</h3>
<input class ="input-field" type="text" @bind="@Price" @oninput="@((e) => { try {Price=Int32.Parse((string)e.Value + "");}catch(Exception){}})" />
<h3>short:</h3>
<input class="input-field" type="text" @bind="@Description" @oninput="@((e) => { Description=(string)e.Value;})" />
<h3>long:</h3>
<textarea class="input-field" type="text" @bind="@DescriptionLong" @oninput="@((e) => { DescriptionLong=(string)e.Value;})" />

<label for="visibility">set visibility:</label>
<select class="select-field" name="visibility" id="visbility">
    <option @onclick="SetVisible">Listed</option>
    <option @onclick="SetNotVisible">Unlisted</option>
</select>
<br />
<br />
<p style="color:red;">@WarningText</p>
<br />
<br />
<button class="login-button" @onclick="CreateServis">create</button>

@code {

    private string Name = ""; //20char
    private string Description = ""; //50char
    private string DescriptionLong = ""; //500char
    private int Price;
    private bool Listed = true;
    private string WarningText = "";

    private void SetVisible() { Listed = true; }
    private void SetNotVisible() { Listed = false; }

    public void CheckboxClicked(object CheckedValue)
    {
        Listed = (bool)CheckedValue;
    }

    public void CreateServis() {


        if (Name.Length < 3)
        {
            WarningText = "name is too short (min 3 characters)";
            return;
        }
        if (Name.Length > 20)
        {
            WarningText = "name is too long (max 20 characters)";
            return;
        }
        if (Description.Length > 50)
        {
            WarningText = "short description is too long (max 50 characters)";
            return;
        }
        if (DescriptionLong.Length > 500)
        {
            WarningText = "long descrition is too long (max 500 characters)";
            return;
        }
        if (Price > int.MaxValue)
        {
            WarningText = "Price is over the maximum";
            return;
        }

        DBService service = new DBService(LoginManager.UserID,Name, Price, DateOnly.FromDateTime(DateTime.Now), null, Listed, Description, DescriptionLong, null,false);
        try 
        {
            serverManager.CreateService(LoginManager.SessionID,service);
            NavManager.NavigateTo("/");
        } catch (Exception e)
        {
            WarningText = e.Message;
        }
        
    }

    protected override void OnAfterRender(bool firstRender)
    {
        CheckLoggedIn();
    }

    private void CheckLoggedIn()
    {
        //kickes user if not signed in
        if (!LoginManager.LoggedIn)
        {
            NavManager.NavigateTo("/login");
        }
    }
}

