@page "/user/edit/{PageID:int}"

@inject NavigationManager NavManager;

<h2>Statistics</h2>
<label for="timeframe">select timeframe:</label>
<select class="select-field" name="timeframe" id="timeframe">
</select>
<h4>number of purchases in time frame: @NumberOfBuys</h4>
<br/>
<h4>total number of credits earned: @Money</h4>
<br/>
<br/>
<br/>
<h2>Edit Service</h2>

<h3>name:</h3>
<input class="input-field" type="text" @bind="@Name" @oninput="@((e) => { Name=(string)e.Value;})" />

<h3>price:</h3>
<input class="input-field" type="text" @bind="@Price" @oninput="@((e) => { try {Price=Int32.Parse((string)e.Value + "");}catch(Exception){}})" />

<h3>short:</h3>
<input class="input-field" type="text" @bind="@Description" @oninput="@((e) => { Description=(string)e.Value;})" />

<h3>long:</h3>
<textarea class="input-field" type="text" @bind="@DescriptionLong" @oninput="@((e) => { DescriptionLong=(string)e.Value;})" />

<label for="visibility">set visibility:</label>
<select class="select-field" name="visibility" id="visbility">
    <option @onclick = "SetVisible">Listed</option>
    <option @onclick="SetNotVisible">Unlisted</option>
</select>
<br />
<br />
<button class="login-button" @onclick="SetValues">revert all changes</button>
<br />
<br />
<p style="color: red;">@WarningText</p>
<button class="login-button" @onclick="EditService">confirm changes</button>

@code {
    [Parameter]
    public int PageID { get; set; }

    private String Name { get; set; }
    private int Price { get; set; }
    private String Description { get; set; }
    private string DescriptionLong { get; set; }
    private bool Listed { get; set; } = true;

    private bool first = true;

    private int NumberOfBuys;
    private int Money;
    private string WarningText = "";

    private void EditService()
    {
        if (Name.Length < 3)
        {
            WarningText = "name is too short (min 3 characters)";
            return;
        }
        if (Name.Length > 20)
        {
            WarningText = "name is too long (max 20 characters)";
            return;
        }
        if (Description.Length > 50)
        {
            WarningText = "short description is too long (max 50 characters)";
            return;
        }
        if (DescriptionLong.Length > 500)
        {
            WarningText = "long descrition is too long (max 500 characters)";
            return;
        }
        if (Price > int.MaxValue)
        {
            WarningText = "Price is over the maximum";
            return;
        }
        NavManager.NavigateTo("/user");

    }

    private void SetValues()
    {
        StateHasChanged();
    }

    private void SetVisible() { Listed = true; }
    private void SetNotVisible() { Listed = false; }


    protected override void OnAfterRender(bool firstRender)
    {
        CheckIfOwner();
    }

    private void CheckIfOwner()
    {
       
    }
}
