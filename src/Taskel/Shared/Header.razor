@using Taskel.Authentication;
@using Taskel.Services;
@using System.Security.Claims;
@using TaskelDB.DAO;
@using TaskelDB.Models.User;

@inject AuthService authService;
@inject CreditService creditService;
@implements IDisposable;

<div class="header">
    <a class="branding" href="/">
        <div class="logo"></div>
        <div class="logo-text"></div>
    </a>
   
    <div class="navigation">

        <a href="/" class="navigation-item">
            Home
        </a>

        <a href="/explore" class="navigation-item">
            Explore
        </a>

        <div class="dropdown">
            <button class="dropbtn">Categories</button>
            <div class="dropdown-content">

                <a class="dropdown-item" href="/category/art">
                    <img class="dropdown-item-icon" src="/Images/Icons/Category/Texture_Icon.png" />
                    <p class="category-name">Art</p>
                </a>

                <a class="dropdown-item" href="/category/music">
                    <img class="dropdown-item-icon" src="/Images/Icons/Category/Music_Icon.png" />
                    <p class="category-name">Music</p>
                </a>

                <a class="dropdown-item" href="/category/sound">
                    <img class="dropdown-item-icon" src="/Images/Icons/Category/Sound_Icon.png" />
                    <p class="category-name">Sound</p>
                </a>

                <a class="dropdown-item" href="/category/models">
                    <img class="dropdown-item-icon" src="/Images/Icons/Category/Model_Icon.png" />
                    <p class="category-name">Models</p>
                </a>

                <a class="dropdown-item" href="/category/code">
                    <img class="dropdown-item-icon" src="/Images/Icons/Category/Code_Icon.png" />
                    <p class="category-name">Code</p>
                </a>
            </div>
        </div>

        <AuthorizeView>
            <Authorized>
                
                <a href="/dashboard" class="navigation-item" @onclick=ToggleMenu>
                    Dashboard
                </a>

                <button class="navigation-item" @onclick=Logout>
                    Logout
                </button>

                <a class="navigation-item" href="/shop">
                    @credits K
                </a>

            </Authorized>
            <NotAuthorized>
                <a href="/signup" class="navigation-item" @onclick=ToggleMenu>
                    Sign Up
                </a>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <div class="mobile-navigation @GetMenuClass()">
        <a href="/" @onclick=ToggleMenu>
            Home
        </a>

        <AuthorizeView>
            <Authorized>
                <a>Credits @credits</a>
                <a href="/dashboard" class="navigation-item" @onclick=ToggleMenu>
                    Dashboard
                </a>

                <button class="navigation-item" @onclick=Logout>
                    Logout
                </button>
            </Authorized>
            <NotAuthorized>
                <a href="/signup" class="navigation-item" @onclick=ToggleMenu>
                    Sign Up
                </a>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <button class="hamburger @GetMenuClass()" @onclick="ToggleMenu">
        <span></span>
        <span></span>
        <span></span>
    </button>
</div>

<div class="header-space"></div>

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }
    private bool isMenuShown;
    private int credits;
    private int userID;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState != null)
        {
            var authState = await authenticationState;
            if (authState.User?.Identity?.IsAuthenticated ?? false)
            {
                var userIdClaim = authState.User?.FindFirst(ClaimTypes.NameIdentifier);
                userID = Convert.ToInt32(userIdClaim?.Value);
                UpdateCreditsCounter();
                creditService.OnCreditsUpdate += UpdateCreditsCounter;
            }
        }
    }

    void IDisposable.Dispose()
    {
        creditService.OnCreditsUpdate -= UpdateCreditsCounter;
    }

    private void UpdateCreditsCounter()
    {
        UserDAO userDAO = new UserDAO();
        try
        {
            UserModel? userModel = userDAO.Get(userID);
            if (userModel != null)
            {
                credits = userModel.Current_Credits;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        StateHasChanged();
    }

    private async Task Logout()
    {
        await authService.Logout();
    }

    private void ToggleMenu()
    {
        isMenuShown = !isMenuShown;
    }

    private string GetMenuClass()
    {
        return isMenuShown ? "menu-shown" : "";
    }
}